// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  password      String?
  accounts      Account[]
  sessions      Session[]
  
  // Reverse relations for IOM
  preparedIOMs  IOM[]     @relation("IOMPreparedBy")
  requestedIOMs IOM[]     @relation("IOMRequestedBy")
  reviewedIOMs  IOM[]     @relation("IOMReviewedBy")
  approvedIOMs  IOM[]     @relation("IOMApprovedBy")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model IOM {
  id          String   @id @default(cuid())
  iomNumber   String   @unique
  title       String
  from        String
  to          String
  subject     String
  content     String?
  status      IOMStatus @default(DRAFT)
  totalAmount Float    @default(0)
  
  // Relationships
  items       IOMItem[]
  preparedBy  User     @relation(fields: [preparedById], references: [id], name: "IOMPreparedBy")
  requestedBy User     @relation(fields: [requestedById], references: [id], name: "IOMRequestedBy")
  reviewedBy  User?    @relation(fields: [reviewedById], references: [id], name: "IOMReviewedBy")
  approvedBy  User?    @relation(fields: [approvedById], references: [id], name: "IOMApprovedBy")
  
  // Foreign keys
  preparedById  String
  requestedById String
  reviewedById  String?
  approvedById  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IOMItem {
  id          String  @id @default(cuid())
  itemName    String
  description String?
  quantity    Int     @default(1)
  unitPrice   Float   @default(0)
  totalPrice  Float   @default(0)
  
  // Relationship
  iom     IOM   @relation(fields: [iomId], references: [id], onDelete: Cascade)
  iomId   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum IOMStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}